Script started on 2025-02-03 03:55:28+00:00 [TERM="xterm-256color" TTY="/dev/pts/2" COLUMNS="204" LINES="61"]
[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ make test
[?2004lcd tests; make bmtest dbtest; whoami; make hftest bttest indextest jointest sorttest sortmerge
make[1]: Entering directory '/home/ubuntu/minjava/javaminibase/src/tests'
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java BMTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.BMTest

Running Buffer Management tests....
Replacer: Clock


  Test 1 does a simple test of normal buffer manager operations:
  - Allocate a bunch of new pages
  - Write something on each one
  - Read that something back from each one
    (because we're buffering, this is where most of the writes happen)
  - Free the pages again
  Test 1 completed successfully.
Test1 - Read I/Os  : 53
Test1 - Write I/Os : 54

  Test 2 exercises some illegal buffer manager operations:
  - Try to pin more pages than there are frames
*** Pinning too many pages
  --> Failed as expected 

  - Try to free a doubly-pinned page
*** Freeing a pinned page
  --> Failed as expected 

  - Try to unpin a page not in the buffer pool
*** Unpinning a page not in the buffer pool
  --> Failed as expected 

  Test 2 completed successfully.
Test2 - Read I/Os  : 1
Test2 - Write I/Os : 1

  Test 3 exercises some of the internals of the buffer manager
  - Allocate and dirty some new pages, one at a time, and leave some pinned
  - Read the pages
  Test 3 completed successfully.
Test3 - Read I/Os  : 58
Test3 - Write I/Os : 69
Test4 - Read I/Os  : 0
Test4 - Write I/Os : 0
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Buffer Management tests completely successfully.

/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java DBTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.DBTest

Running Disk Space Management tests....

Replacer: Clock


  Test 1 creates a new database and does some tests of normal operations:
  - Add some file entries
  - Allocate a run of pages
  - Write something on some of them
  - Deallocate the rest of them
  Test 1 completed successfully.
Test1 - Read I/Os  : 4
Test1 - Write I/Os : 22

  Test 2 opens the database created in test 1 and does some further tests:
  - Delete some of the file entries
  - Look up file entries that should still be there
  - Read stuff back from pages we wrote in test 1
  Test 2 completed successfully.
Test2 - Read I/Os  : 20
Test2 - Write I/Os : 0

  Test 3 tests for some error conditions:
  - Look up a deleted file entry
**** Looking up a deleted file entry
  --> Failed as expected 

  - Try to delete a deleted entry again
**** Delete a deleted file entry again
  --> Failed as expected 

  - Try to delete a nonexistent file entry
**** Deleting a nonexistent file entry
  --> Failed as expected 

  - Look up a nonexistent file entry
**** Looking up a nonexistent file entry
  --> Failed as expected 

  - Try to add a file entry that's already there
**** Adding a duplicate file entry
  --> Failed as expected 

  - Try to add a file entry whose name is too long
**** Adding a file entry with too long a name
  --> Failed as expected 

  - Try to allocate a run of pages that's too long 
**** Allocating a run that's too long
  --> Failed as expected 

  - Try to allocate a negative run of pages 
**** Allocating a negative run
  --> Failed as expected 

  - Try to deallocate a negative run of pages 
**** Deallocating a negative run
  --> Failed as expected 

  Test 3 completed successfully.
Test3 - Read I/Os  : 0
Test3 - Write I/Os : 0

  Test 4 tests some boundary conditions.
    (These tests are quite implementation-specific.)
  - Make sure no pages are pinned
  - Allocate all pages remaining after DB overhead is accounted for
  - Attempt to allocate one more page
**** Allocating one additional page
  --> Failed as expected 

  - Free some of the allocated pages
  - Allocate some of the just-freed pages
  - Free two continued run of the allocated pages
  - Allocate back number of pages equal to the just freed pages

  - Add enough file entries that the directory must surpass one page
  - Make sure the directory has taken up an extra page.
    Try to allocate more pages than should be available
**** Allocating more pages than are now available
   --> Failed as expected 

  - At this point, all pages should be claimed. Try to allocate one more.
**** Allocating one more page than there is
   --> Failed as expected 

  - Free the last two pages: boundary condition in the space map.
  Test 4 completed successfully.
Test4 - Read I/Os  : 0
Test4 - Write I/Os : 0
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Disk Space Management tests completely successfully.

make[1]: Leaving directory '/home/ubuntu/minjava/javaminibase/src/tests'
ubuntu
make[1]: Entering directory '/home/ubuntu/minjava/javaminibase/src/tests'
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java HFTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.HFTest

Running Heap File tests....

Replacer: Clock


  Test 1: Insert and scan fixed-size records

  - Create a heap file

  - Add 100 records to the file

  - Scan the records just inserted

  Test 1 completed successfully.

Test1 - Read I/Os  : 2
Test1 - Write I/Os : 0

  Test 2: Delete fixed-size records

  - Open the same heap file as test 1

  - Delete half the records

  - Scan the remaining records

  Test 2 completed successfully.

Test2 - Read I/Os  : 0
Test2 - Write I/Os : 0

  Test 3: Update fixed-size records

  - Open the same heap file as tests 1 and 2

  - Change the records

  - Check that the updates are really there

  Test 3 completed successfully.

Test3 - Read I/Os  : 0
Test3 - Write I/Os : 0

  Test 4: Test some error conditions

  - Try to change the size of a record

**** Shortening a record
  --> Failed as expected 

**** Lengthening a record
  --> Failed as expected 

  - Try to insert a record that's too long

**** Inserting a too-long record
  --> Failed as expected 

  Test 4 completed successfully.

Test4 - Read I/Os  : 0
Test4 - Write I/Os : 0
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Heap File tests completely successfully.

/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java BTTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.BTTest
Replacer: Clock


Running tests....

 ********** The file name is: AAA0  **********
-------------------------- MENU ------------------


[0]   Naive delete (new file)
[1]   Full delete(Default) (new file)

[2]   Print the B+ Tree Structure
[3]   Print All Leaf Pages
[4]   Choose a Page to Print

           ---Integer Key (for choices [6]-[14]) ---

[5]   Insert a Record
[6]   Delete a Record
[7]   Test1 (new file): insert n records in order
[8]   Test2 (new file): insert n records in reverse order
[9]   Test3 (new file): insert n records in random order
[10]  Test4 (new file): insert n records in random order and delete m records randomly
[11]  Delete some records

[12]  Initialize a Scan
[13]  Scan the next Record
[14]  Delete the just-scanned record

           ---String Key (for choice [15]) ---

[15]  Test5 (new file): insert n records in random order and delete m records randomly.

[16]  Close the file
[17]  Open which file (input an integer for the file name)
[18]  Destroy which file (input an integer for the file name)

[19]  Quit!
Hi, make your choice :19

... Finished.

/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java IndexTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.IndexTest

Running Index tests....

Replacer: Clock

------------------------ TEST 1 --------------------------
BTreeIndex created successfully.

BTreeIndex file created successfully.

Test1 -- Index Scan OK
------------------- TEST 1 completed ---------------------

Test1 - Read I/Os  : 2
Test1 - Write I/Os : 0
------------------------ TEST 2 --------------------------
BTreeIndex opened successfully.

Test2 -- Index Scan OK
------------------- TEST 2 completed ---------------------

Test2 - Read I/Os  : 0
Test2 - Write I/Os : 0
------------------------ TEST 3 --------------------------
BTreeIndex created successfully.

BTreeIndex file created successfully.

Test3 -- Index scan on int key OK

------------------- TEST 3 completed ---------------------

Test3 - Read I/Os  : 16470
Test3 - Write I/Os : 167
Test4 - Read I/Os  : 0
Test4 - Write I/Os : 0
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Index tests 
completely successfully
.


Index tests completed successfully
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java JoinTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: ../tests/QueryCheck.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.JoinTest
Replacer: Clock



Any resemblance of persons in this database to people living or dead
is purely coincidental. The contents of this database do not reflect
the views of the University, the Computer Sciences Department or the
developers...

**********************Query1 starting *********************
Query: Find the names of sailors who have reserved boat number 1.
       and print out the date of reservation.

  SELECT S.sname, R.date
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid AND R.bid = 1

(Tests FileScan, Projection, and Sort-Merge Join)

[Mike Carey, 05/10/95]
[David Dewitt, 05/11/95]
[Jeff Naughton, 05/12/95]

Query1 completed successfully!
******************* Query1 finished!!! *****************

Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0


Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0
**********************Query2 starting *********************
Query: Find the names of sailors who have reserved a red boat
and return them in alphabetical order.

  SELECT   S.sname
  FROM     Sailors S, Boats B, Reserves R
  WHERE    S.sid = R.sid AND R.bid = B.bid AND B.color = 'red'
  ORDER BY S.sname
(Tests File scan, Index scan, Projection, index selection,
 sort and simple nested-loop join.)

After Building btree index on sailors.sid.

[David Dewitt]
[Mike Carey]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query2 completed successfully!
******************* Query2 finished!!! *****************

Query2 - Read I/Os  : 0
Query2 - Write I/Os : 0


Query2 - Read I/Os  : 0
Query2 - Write I/Os : 0
**********************Query3 starting *********************
Query: Find the names of sailors who have reserved a boat.

  SELECT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, and SortMerge Join.)

[Mike Carey]
[Mike Carey]
[Mike Carey]
[David Dewitt]
[David Dewitt]
[Jeff Naughton]
[Miron Livny]
[Yannis Ioannidis]
[Raghu Ramakrishnan]
[Raghu Ramakrishnan]

Query3 completed successfully!
******************* Query3 finished!!! *****************

Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0


Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0
**********************Query4 starting *********************
Query: Find the names of sailors who have reserved a boat
       and print each name once.

  SELECT DISTINCT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, Sort-Merge Join and Dup elimination.)

[David Dewitt]
[Jeff Naughton]
[Mike Carey]
[Miron Livny]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query4 completed successfully!
******************* Query4 finished!!! *****************

Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0


Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0
**********************Query5 starting *********************
Query: Find the names of old sailors or sailors with a rating < 7,
who have reserved a boat.
  SELECT S.sname, S.rating, S.age
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid and (S.age > 40 || S.rating < 7)

(Tests FileScan, Multiple Selection, Projection, and Sort-Merge Join.)

[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[David Dewitt, 10, 47.2]
[David Dewitt, 10, 47.2]
[Jeff Naughton, 5, 35.0]
[Yannis Ioannidis, 8, 40.2]

Query5 completed successfully!
******************* Query5 finished!!! *****************

Query5 - Read I/Os  : 0
Query5 - Write I/Os : 0


Query5 - Read I/Os  : 0
Query5 - Write I/Os : 0
**********************Query6 starting *********************
Query: Find the names of sailors with a rating > 7
who have reserved a red boat, sorted by name.

  SELECT   S.sname
  FROM     Sailors S, Boats B, Reserves R
  WHERE    S.sid = R.sid AND S.rating > 7 AND R.bid = B.bid
           AND B.color = 'red'
  ORDER BY S.name

(Tests FileScan, Multiple Selection, Projection, sort, nested-loop join.)

After nested loop join S.sid |><| R.sid.
After nested loop join R.bid |><| B.bid AND B.color=red.
After sorting the output tuples.
[David Dewitt]
[Mike Carey]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query6 completed successfully!
******************* Query6 finished!!! *****************

Query6 - Read I/Os  : 0
Query6 - Write I/Os : 0


Query6 - Read I/Os  : 0
Query6 - Write I/Os : 0
Finished joins testing
join tests completed successfully
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java SortTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.SortTest

Running Sort tests....

Replacer: Clock

------------------------ TEST 1 --------------------------
Test1 -- Sorting OK
------------------- TEST 1 completed ---------------------

Test1 - Read I/Os  : 3
Test1 - Write I/Os : 15
------------------------ TEST 2 --------------------------
Test2 -- Sorting OK
------------------- TEST 2 completed ---------------------

Test2 - Read I/Os  : 0
Test2 - Write I/Os : 11
------------------------ TEST 3 --------------------------
 -- Sorting in ascending order on the int field -- 
Test3 -- Sorting of int field OK

 -- Sorting in descending order on the float field -- 
Test3 -- Sorting of float field OK

------------------- TEST 3 completed ---------------------

Test3 - Read I/Os  : 427
Test3 - Write I/Os : 339
------------------------ TEST 4 --------------------------
Test4 -- Sorting OK
------------------- TEST 4 completed ---------------------

Test4 - Read I/Os  : 104
Test4 - Write I/Os : 106
Test5 - Nothing done, so counters are minimal.
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Nothing done, so counters are minimal.
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Sort tests 
completely successfully
.


Sorting tests completed successfully
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. SM_JoinTest.java TestDriver.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: SM_JoinTest.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.SM_JoinTest
Replacer: Clock



Any resemblance of persons in this database to people living or dead
is purely coincidental. The contents of this database do not reflect
the views of the University, the Computer Sciences Department, or the
developers...

**********************Query1 starting *********************
Query: Find the names of sailors who have reserved boat #1,
and print out the date of reservation.

  SELECT S.sname, R.date
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid AND R.bid = 1

(Tests FileScan, Projection, and Sort-Merge Join)

[Mike Carey, 05/10/95]
[David Dewitt, 05/11/95]
[Jeff Naughton, 05/12/95]

Query1 completed successfully!
******************* Query1 finished!!! *****************

Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0


Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0
********************** Query2 starting *********************
Query2 - Read I/Os  : 0
Query2 - Write I/Os : 0
**********************Query3 starting *********************
Query: Find the names of sailors who have reserved a boat.

  SELECT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, and SortMerge Join.)

[Mike Carey]
[Mike Carey]
[Mike Carey]
[David Dewitt]
[David Dewitt]
[Jeff Naughton]
[Miron Livny]
[Yannis Ioannidis]
[Raghu Ramakrishnan]
[Raghu Ramakrishnan]

Query3 completed successfully!
******************* Query3 finished!!! *****************

Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0


Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0
**********************Query4 starting *********************
Query: Find the names of sailors who have reserved a boat
and print each name once.

  SELECT DISTINCT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, Sort-Merge Join, Dup Elim.)

[David Dewitt]
[Jeff Naughton]
[Mike Carey]
[Miron Livny]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query4 completed successfully!
******************* Query4 finished!!! *****************

Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0


Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0
**********************Query5 starting *********************
Query: Find the names of old sailors or sailors with rating < 7,
who have reserved a boat.

  SELECT S.sname, S.rating, S.age
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid and (S.age > 40 || S.rating < 7)

(Tests FileScan, Multiple Selection, Projection, Sort-Merge Join.)

[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[David Dewitt, 10, 47.2]
[David Dewitt, 10, 47.2]
[Jeff Naughton, 5, 35.0]
[Yannis Ioannidis, 8, 40.2]

Query5 completed successfully!
******************* Query5 finished!!! *****************

Query5 - Read I/Os  : 0
Query5 - Write I/Os : 0


Query5 - Read I/Os  : 0
Query5 - Write I/Os : 0
********************** Query6 starting *********************
Query6 - Read I/Os  : 0
Query6 - Write I/Os : 0
Finished joins testing
join tests completed successfully
make[1]: Leaving directory '/home/ubuntu/minjava/javaminibase/src/tests'
[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ 
[?2004l[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ 
[?2004l[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ 
[?2004l[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ 
[?2004l[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ 
[?2004l[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ 
[?2004l[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ 
[?2004l[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ ls
[?2004l[0m[01;34mMETA-INF[0m  [01;32mMakefile[0m  [01;34mbtree[0m  [01;34mbufmgr[0m  [01;34mcatalog[0m  [01;34mchainexception[0m  [01;34mdiskmgr[0m  [01;34mglobal[0m  [01;34mheap[0m  [01;34mindex[0m  [01;34miterator[0m  [01;34mjavadoc[0m  [01;34mlib[0m  [01;34mtests[0m  [01;34mtests2[0m  typescript
[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ [?2004l
exit

Script done on 2025-02-03 06:07:39+00:00 [COMMAND_EXIT_CODE="0"]
e run
  --> Failed as expected 

  - Try to deallocate a negative run of pages 
**** Deallocating a negative run
  --> Failed as expected 

  Test 3 completed successfully.
Test3 - Read I/Os  : 0
Test3 - Write I/Os : 0

  Test 4 tests some boundary conditions.
    (These tests are quite implementation-specific.)
  - Make sure no pages are pinned
  - Allocate all pages remaining after DB overhead is accounted for
  - Attempt to allocate one more page
**** Allocating one additional page
  --> Failed as expected 

  - Free some of the allocated pages
  - Allocate some of the just-freed pages
  - Free two continued run of the allocated pages
  - Allocate back number of pages equal to the just freed pages

  - Add enough file entries that the directory must surpass one page
  - Make sure the directory has taken up an extra page.
    Try to allocate more pages than should be available
**** Allocating more pages than are now available
   --> Failed as expected 

  - At this point, all pages should be claimed. Try to allocate one more.
**** Allocating one more page than there is
   --> Failed as expected 

  - Free the last two pages: boundary condition in the space map.
  Test 4 completed successfully.
Test4 - Read I/Os  : 0
Test4 - Write I/Os : 0
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Disk Space Management tests completely successfully.

make[1]: Leaving directory '/home/ubuntu/minjava/javaminibase/src/tests'
ubuntu
make[1]: Entering directory '/home/ubuntu/minjava/javaminibase/src/tests'
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java HFTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.HFTest

Running Heap File tests....

Replacer: Clock


  Test 1: Insert and scan fixed-size records

  - Create a heap file

  - Add 100 records to the file

  - Scan the records just inserted

  Test 1 completed successfully.

Test1 - Read I/Os  : 2
Test1 - Write I/Os : 0

  Test 2: Delete fixed-size records

  - Open the same heap file as test 1

  - Delete half the records

  - Scan the remaining records

  Test 2 completed successfully.

Test2 - Read I/Os  : 0
Test2 - Write I/Os : 0

  Test 3: Update fixed-size records

  - Open the same heap file as tests 1 and 2

  - Change the records

  - Check that the updates are really there

  Test 3 completed successfully.

Test3 - Read I/Os  : 0
Test3 - Write I/Os : 0

  Test 4: Test some error conditions

  - Try to change the size of a record

**** Shortening a record
  --> Failed as expected 

**** Lengthening a record
  --> Failed as expected 

  - Try to insert a record that's too long

**** Inserting a too-long record
  --> Failed as expected 

  Test 4 completed successfully.

Test4 - Read I/Os  : 0
Test4 - Write I/Os : 0
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Heap File tests completely successfully.

/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java BTTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.BTTest
Replacer: Clock


Running tests....

 ********** The file name is: AAA0  **********
-------------------------- MENU ------------------


[0]   Naive delete (new file)
[1]   Full delete(Default) (new file)

[2]   Print the B+ Tree Structure
[3]   Print All Leaf Pages
[4]   Choose a Page to Print

           ---Integer Key (for choices [6]-[14]) ---

[5]   Insert a Record
[6]   Delete a Record
[7]   Test1 (new file): insert n records in order
[8]   Test2 (new file): insert n records in reverse order
[9]   Test3 (new file): insert n records in random order
[10]  Test4 (new file): insert n records in random order and delete m records randomly
[11]  Delete some records

[12]  Initialize a Scan
[13]  Scan the next Record
[14]  Delete the just-scanned record

           ---String Key (for choice [15]) ---

[15]  Test5 (new file): insert n records in random order and delete m records randomly.

[16]  Close the file
[17]  Open which file (input an integer for the file name)
[18]  Destroy which file (input an integer for the file name)

[19]  Quit!
Hi, make your choice :19

... Finished.

/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java IndexTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.IndexTest

Running Index tests....

Replacer: Clock

------------------------ TEST 1 --------------------------
BTreeIndex created successfully.

BTreeIndex file created successfully.

Test1 -- Index Scan OK
------------------- TEST 1 completed ---------------------

Test1 - Read I/Os  : 2
Test1 - Write I/Os : 0
------------------------ TEST 2 --------------------------
BTreeIndex opened successfully.

Test2 -- Index Scan OK
------------------- TEST 2 completed ---------------------

Test2 - Read I/Os  : 0
Test2 - Write I/Os : 0
------------------------ TEST 3 --------------------------
BTreeIndex created successfully.

BTreeIndex file created successfully.

Test3 -- Index scan on int key OK

------------------- TEST 3 completed ---------------------

Test3 - Read I/Os  : 16470
Test3 - Write I/Os : 167
Test4 - Read I/Os  : 0
Test4 - Write I/Os : 0
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Index tests 
completely successfully
.


Index tests completed successfully
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java JoinTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: ../tests/QueryCheck.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.JoinTest
Replacer: Clock



Any resemblance of persons in this database to people living or dead
is purely coincidental. The contents of this database do not reflect
the views of the University, the Computer Sciences Department or the
developers...

**********************Query1 starting *********************
Query: Find the names of sailors who have reserved boat number 1.
       and print out the date of reservation.

  SELECT S.sname, R.date
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid AND R.bid = 1

(Tests FileScan, Projection, and Sort-Merge Join)

[Mike Carey, 05/10/95]
[David Dewitt, 05/11/95]
[Jeff Naughton, 05/12/95]

Query1 completed successfully!
******************* Query1 finished!!! *****************

Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0


Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0
**********************Query2 starting *********************
Query: Find the names of sailors who have reserved a red boat
and return them in alphabetical order.

  SELECT   S.sname
  FROM     Sailors S, Boats B, Reserves R
  WHERE    S.sid = R.sid AND R.bid = B.bid AND B.color = 'red'
  ORDER BY S.sname
(Tests File scan, Index scan, Projection, index selection,
 sort and simple nested-loop join.)

After Building btree index on sailors.sid.

[David Dewitt]
[Mike Carey]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query2 completed successfully!
******************* Query2 finished!!! *****************

Query2 - Read I/Os  : 0
Query2 - Write I/Os : 0


Query2 - Read I/Os  : 0
Query2 - Write I/Os : 0
**********************Query3 starting *********************
Query: Find the names of sailors who have reserved a boat.

  SELECT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, and SortMerge Join.)

[Mike Carey]
[Mike Carey]
[Mike Carey]
[David Dewitt]
[David Dewitt]
[Jeff Naughton]
[Miron Livny]
[Yannis Ioannidis]
[Raghu Ramakrishnan]
[Raghu Ramakrishnan]

Query3 completed successfully!
******************* Query3 finished!!! *****************

Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0


Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0
**********************Query4 starting *********************
Query: Find the names of sailors who have reserved a boat
       and print each name once.

  SELECT DISTINCT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, Sort-Merge Join and Dup elimination.)

[David Dewitt]
[Jeff Naughton]
[Mike Carey]
[Miron Livny]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query4 completed successfully!
******************* Query4 finished!!! *****************

Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0


Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0
**********************Query5 starting *********************
Query: Find the names of old sailors or sailors with a rating < 7,
who have reserved a boat.
  SELECT S.sname, S.rating, S.age
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid and (S.age > 40 || S.rating < 7)

(Tests FileScan, Multiple Selection, Projection, and Sort-Merge Join.)

[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[David Dewitt, 10, 47.2]
[David Dewitt, 10, 47.2]
[Jeff Naughton, 5, 35.0]
[Yannis Ioannidis, 8, 40.2]

Query5 completed successfully!
******************* Query5 finished!!! *****************

Query5 - Read I/Os  : 0
Query5 - Write I/Os : 0


Query5 - Read I/Os  : 0
Query5 - Write I/Os : 0
**********************Query6 starting *********************
Query: Find the names of sailors with a rating > 7
who have reserved a red boat, sorted by name.

  SELECT   S.sname
  FROM     Sailors S, Boats B, Reserves R
  WHERE    S.sid = R.sid AND S.rating > 7 AND R.bid = B.bid
           AND B.color = 'red'
  ORDER BY S.name

(Tests FileScan, Multiple Selection, Projection, sort, nested-loop join.)

After nested loop join S.sid |><| R.sid.
After nested loop join R.bid |><| B.bid AND B.color=red.
After sorting the output tuples.
[David Dewitt]
[Mike Carey]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query6 completed successfully!
******************* Query6 finished!!! *****************

Query6 - Read I/Os  : 0
Query6 - Write I/Os : 0


Query6 - Read I/Os  : 0
Query6 - Write I/Os : 0
Finished joins testing
join tests completed successfully
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java SortTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.SortTest

Running Sort tests....

Replacer: Clock

------------------------ TEST 1 --------------------------
Test1 -- Sorting OK
------------------- TEST 1 completed ---------------------

Test1 - Read I/Os  : 3
Test1 - Write I/Os : 15
------------------------ TEST 2 --------------------------
Test2 -- Sorting OK
------------------- TEST 2 completed ---------------------

Test2 - Read I/Os  : 0
Test2 - Write I/Os : 11
------------------------ TEST 3 --------------------------
 -- Sorting in ascending order on the int field -- 
Test3 -- Sorting of int field OK

 -- Sorting in descending order on the float field -- 
Test3 -- Sorting of float field OK

------------------- TEST 3 completed ---------------------

Test3 - Read I/Os  : 427
Test3 - Write I/Os : 339
------------------------ TEST 4 --------------------------
Test4 -- Sorting OK
------------------- TEST 4 completed ---------------------

Test4 - Read I/Os  : 104
Test4 - Write I/Os : 106
Test5 - Nothing done, so counters are minimal.
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Nothing done, so counters are minimal.
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Sort tests 
completely successfully
.


Sorting tests completed successfully
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. SM_JoinTest.java TestDriver.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: SM_JoinTest.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.SM_JoinTest
Replacer: Clock



Any resemblance of persons in this database to people living or dead
is purely coincidental. The contents of this database do not reflect
the views of the University, the Computer Sciences Department, or the
developers...

**********************Query1 starting *********************
Query: Find the names of sailors who have reserved boat #1,
and print out the date of reservation.

  SELECT S.sname, R.date
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid AND R.bid = 1

(Tests FileScan, Projection, and Sort-Merge Join)

[Mike Carey, 05/10/95]
[David Dewitt, 05/11/95]
[Jeff Naughton, 05/12/95]

Query1 completed successfully!
******************* Query1 finished!!! *****************

Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0


Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0
********************** Query2 starting *********************
Query2 - Read I/Os  : 0
Query2 - Write I/Os : 0
**********************Query3 starting *********************
Query: Find the names of sailors who have reserved a boat.

  SELECT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, and SortMerge Join.)

[Mike Carey]
[Mike Carey]
[Mike Carey]
[David Dewitt]
[David Dewitt]
[Jeff Naughton]
[Miron Livny]
[Yannis Ioannidis]
[Raghu Ramakrishnan]
[Raghu Ramakrishnan]

Query3 completed successfully!
******************* Query3 finished!!! *****************

Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0


Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0
**********************Query4 starting *********************
Query: Find the names of sailors who have reserved a boat
and print each name once.

  SELECT DISTINCT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, Sort-Merge Join, Dup Elim.)

[David Dewitt]
[Jeff Naughton]
[Mike Carey]
[Miron Livny]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query4 completed successfully!
******************* Query4 finished!!! *****************

Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0


Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0
**********************Query5 starting *********************
Query: Find the names of old sailors or sailors with rating < 7,
who have reserved a boat.

  SELECT S.sname, S.rating, S.age
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid and (S.age > 40 || S.rating < 7)

(Tests FileScan, Multiple Selection, Projection, Sort-Merge Join.)

[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[David Dewitt, 10, 47.2]
[David Dewit                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                [Kmake testls[Kmake testls[K testsnano tests/QueryCheck.java[Kscript
[?2004lScript started, output log file is 'typescript'.
[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ make test
[?2004lcd tests; make bmtest dbtest; whoami; make hftest bttest indextest jointest sorttest sortmerge
make[1]: Entering directory '/home/ubuntu/minjava/javaminibase/src/tests'
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java BMTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.BMTest

Running Buffer Management tests....
Replacer: Clock


  Test 1 does a simple test of normal buffer manager operations:
  - Allocate a bunch of new pages
  - Write something on each one
  - Read that something back from each one
    (because we're buffering, this is where most of the writes happen)
  - Free the pages again
  Test 1 completed successfully.
Test1 - Read I/Os  : 53
Test1 - Write I/Os : 54

  Test 2 exercises some illegal buffer manager operations:
  - Try to pin more pages than there are frames
*** Pinning too many pages
  --> Failed as expected 

  - Try to free a doubly-pinned page
*** Freeing a pinned page
  --> Failed as expected 

  - Try to unpin a page not in the buffer pool
*** Unpinning a page not in the buffer pool
  --> Failed as expected 

  Test 2 completed successfully.
Test2 - Read I/Os  : 1
Test2 - Write I/Os : 1

  Test 3 exercises some of the internals of the buffer manager
  - Allocate and dirty some new pages, one at a time, and leave some pinned
  - Read the pages
  Test 3 completed successfully.
Test3 - Read I/Os  : 58
Test3 - Write I/Os : 69
Test4 - Read I/Os  : 0
Test4 - Write I/Os : 0
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Buffer Management tests completely successfully.

/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java DBTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.DBTest

Running Disk Space Management tests....

Replacer: Clock


  Test 1 creates a new database and does some tests of normal operations:
  - Add some file entries
  - Allocate a run of pages
  - Write something on some of them
  - Deallocate the rest of them
  Test 1 completed successfully.
Test1 - Read I/Os  : 4
Test1 - Write I/Os : 22

  Test 2 opens the database created in test 1 and does some further tests:
  - Delete some of the file entries
  - Look up file entries that should still be there
  - Read stuff back from pages we wrote in test 1
  Test 2 completed successfully.
Test2 - Read I/Os  : 20
Test2 - Write I/Os : 0

  Test 3 tests for some error conditions:
  - Look up a deleted file entry
**** Looking up a deleted file entry
  --> Failed as expected 

  - Try to delete a deleted entry again
**** Delete a deleted file entry again
  --> Failed as expected 

  - Try to delete a nonexistent file entry
**** Deleting a nonexistent file entry
  --> Failed as expected 

  - Look up a nonexistent file entry
**** Looking up a nonexistent file entry
  --> Failed as expected 

  - Try to add a file entry that's already there
**** Adding a duplicate file entry
  --> Failed as expected 

  - Try to add a file entry whose name is too long
**** Adding a file entry with too long a name
  --> Failed as expected 

  - Try to allocate a run of pages that's too long 
**** Allocating a run that's too long
  --> Failed as expected 

  - Try to allocate a negative run of pages 
**** Allocating a negative run
  --> Failed as expected 

  - Try to deallocate a negative run of pages 
**** Deallocating a negative run
  --> Failed as expected 

  Test 3 completed successfully.
Test3 - Read I/Os  : 0
Test3 - Write I/Os : 0

  Test 4 tests some boundary conditions.
    (These tests are quite implementation-specific.)
  - Make sure no pages are pinned
  - Allocate all pages remaining after DB overhead is accounted for
  - Attempt to allocate one more page
**** Allocating one additional page
  --> Failed as expected 

  - Free some of the allocated pages
  - Allocate some of the just-freed pages
  - Free two continued run of the allocated pages
  - Allocate back number of pages equal to the just freed pages

  - Add enough file entries that the directory must surpass one page
  - Make sure the directory has taken up an extra page.
    Try to allocate more pages than should be available
**** Allocating more pages than are now available
   --> Failed as expected 

  - At this point, all pages should be claimed. Try to allocate one more.
**** Allocating one more page than there is
   --> Failed as expected 

  - Free the last two pages: boundary condition in the space map.
  Test 4 completed successfully.
Test4 - Read I/Os  : 0
Test4 - Write I/Os : 0
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Disk Space Management tests completely successfully.

make[1]: Leaving directory '/home/ubuntu/minjava/javaminibase/src/tests'
ubuntu
make[1]: Entering directory '/home/ubuntu/minjava/javaminibase/src/tests'
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java HFTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.HFTest

Running Heap File tests....

Replacer: Clock


  Test 1: Insert and scan fixed-size records

  - Create a heap file

  - Add 100 records to the file

  - Scan the records just inserted

  Test 1 completed successfully.

Test1 - Read I/Os  : 2
Test1 - Write I/Os : 0

  Test 2: Delete fixed-size records

  - Open the same heap file as test 1

  - Delete half the records

  - Scan the remaining records

  Test 2 completed successfully.

Test2 - Read I/Os  : 0
Test2 - Write I/Os : 0

  Test 3: Update fixed-size records

  - Open the same heap file as tests 1 and 2

  - Change the records

  - Check that the updates are really there

  Test 3 completed successfully.

Test3 - Read I/Os  : 0
Test3 - Write I/Os : 0

  Test 4: Test some error conditions

  - Try to change the size of a record

**** Shortening a record
  --> Failed as expected 

**** Lengthening a record
  --> Failed as expected 

  - Try to insert a record that's too long

**** Inserting a too-long record
  --> Failed as expected 

  Test 4 completed successfully.

Test4 - Read I/Os  : 0
Test4 - Write I/Os : 0
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Heap File tests completely successfully.

/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java BTTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.BTTest
Replacer: Clock


Running tests....

 ********** The file name is: AAA0  **********
-------------------------- MENU ------------------


[0]   Naive delete (new file)
[1]   Full delete(Default) (new file)

[2]   Print the B+ Tree Structure
[3]   Print All Leaf Pages
[4]   Choose a Page to Print

           ---Integer Key (for choices [6]-[14]) ---

[5]   Insert a Record
[6]   Delete a Record
[7]   Test1 (new file): insert n records in order
[8]   Test2 (new file): insert n records in reverse order
[9]   Test3 (new file): insert n records in random order
[10]  Test4 (new file): insert n records in random order and delete m records randomly
[11]  Delete some records

[12]  Initialize a Scan
[13]  Scan the next Record
[14]  Delete the just-scanned record

           ---String Key (for choice [15]) ---

[15]  Test5 (new file): insert n records in random order and delete m records randomly.

[16]  Close the file
[17]  Open which file (input an integer for the file name)
[18]  Destroy which file (input an integer for the file name)

[19]  Quit!
Hi, make your choice :19

... Finished.

/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java IndexTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.IndexTest

Running Index tests....

Replacer: Clock

------------------------ TEST 1 --------------------------
BTreeIndex created successfully.

BTreeIndex file created successfully.

Test1 -- Index Scan OK
------------------- TEST 1 completed ---------------------

Test1 - Read I/Os  : 2
Test1 - Write I/Os : 0
------------------------ TEST 2 --------------------------
BTreeIndex opened successfully.

Test2 -- Index Scan OK
------------------- TEST 2 completed ---------------------

Test2 - Read I/Os  : 0
Test2 - Write I/Os : 0
------------------------ TEST 3 --------------------------
BTreeIndex created successfully.

BTreeIndex file created successfully.

Test3 -- Index scan on int key OK

------------------- TEST 3 completed ---------------------

Test3 - Read I/Os  : 16470
Test3 - Write I/Os : 167
Test4 - Read I/Os  : 0
Test4 - Write I/Os : 0
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Index tests 
completely successfully
.


Index tests completed successfully
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java JoinTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: ../tests/QueryCheck.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.JoinTest
Replacer: Clock



Any resemblance of persons in this database to people living or dead
is purely coincidental. The contents of this database do not reflect
the views of the University, the Computer Sciences Department or the
developers...

**********************Query1 starting *********************
Query: Find the names of sailors who have reserved boat number 1.
       and print out the date of reservation.

  SELECT S.sname, R.date
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid AND R.bid = 1

(Tests FileScan, Projection, and Sort-Merge Join)

[Mike Carey, 05/10/95]
[David Dewitt, 05/11/95]
[Jeff Naughton, 05/12/95]

Query1 completed successfully!
******************* Query1 finished!!! *****************

Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0


Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0
**********************Query2 starting *********************
Query: Find the names of sailors who have reserved a red boat
and return them in alphabetical order.

  SELECT   S.sname
  FROM     Sailors S, Boats B, Reserves R
  WHERE    S.sid = R.sid AND R.bid = B.bid AND B.color = 'red'
  ORDER BY S.sname
(Tests File scan, Index scan, Projection, index selection,
 sort and simple nested-loop join.)

After Building btree index on sailors.sid.

[David Dewitt]
[Mike Carey]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query2 completed successfully!
******************* Query2 finished!!! *****************

Query2 - Read I/Os  : 0
Query2 - Write I/Os : 0


Query2 - Read I/Os  : 0
Query2 - Write I/Os : 0
**********************Query3 starting *********************
Query: Find the names of sailors who have reserved a boat.

  SELECT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, and SortMerge Join.)

[Mike Carey]
[Mike Carey]
[Mike Carey]
[David Dewitt]
[David Dewitt]
[Jeff Naughton]
[Miron Livny]
[Yannis Ioannidis]
[Raghu Ramakrishnan]
[Raghu Ramakrishnan]

Query3 completed successfully!
******************* Query3 finished!!! *****************

Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0


Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0
**********************Query4 starting *********************
Query: Find the names of sailors who have reserved a boat
       and print each name once.

  SELECT DISTINCT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, Sort-Merge Join and Dup elimination.)

[David Dewitt]
[Jeff Naughton]
[Mike Carey]
[Miron Livny]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query4 completed successfully!
******************* Query4 finished!!! *****************

Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0


Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0
**********************Query5 starting *********************
Query: Find the names of old sailors or sailors with a rating < 7,
who have reserved a boat.
  SELECT S.sname, S.rating, S.age
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid and (S.age > 40 || S.rating < 7)

(Tests FileScan, Multiple Selection, Projection, and Sort-Merge Join.)

[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[David Dewitt, 10, 47.2]
[David Dewitt, 10, 47.2]
[Jeff Naughton, 5, 35.0]
[Yannis Ioannidis, 8, 40.2]

Query5 completed successfully!
******************* Query5 finished!!! *****************

Query5 - Read I/Os  : 0
Query5 - Write I/Os : 0


Query5 - Read I/Os  : 0
Query5 - Write I/Os : 0
**********************Query6 starting *********************
Query: Find the names of sailors with a rating > 7
who have reserved a red boat, sorted by name.

  SELECT   S.sname
  FROM     Sailors S, Boats B, Reserves R
  WHERE    S.sid = R.sid AND S.rating > 7 AND R.bid = B.bid
           AND B.color = 'red'
  ORDER BY S.name

(Tests FileScan, Multiple Selection, Projection, sort, nested-loop join.)

After nested loop join S.sid |><| R.sid.
After nested loop join R.bid |><| B.bid AND B.color=red.
After sorting the output tuples.
[David Dewitt]
[Mike Carey]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query6 completed successfully!
******************* Query6 finished!!! *****************

Query6 - Read I/Os  : 0
Query6 - Write I/Os : 0


Query6 - Read I/Os  : 0
Query6 - Write I/Os : 0
Finished joins testing
join tests completed successfully
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. TestDriver.java SortTest.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.SortTest

Running Sort tests....

Replacer: Clock

------------------------ TEST 1 --------------------------
Test1 -- Sorting OK
------------------- TEST 1 completed ---------------------

Test1 - Read I/Os  : 3
Test1 - Write I/Os : 15
------------------------ TEST 2 --------------------------
Test2 -- Sorting OK
------------------- TEST 2 completed ---------------------

Test2 - Read I/Os  : 0
Test2 - Write I/Os : 11
------------------------ TEST 3 --------------------------
 -- Sorting in ascending order on the int field -- 
Test3 -- Sorting of int field OK

 -- Sorting in descending order on the float field -- 
Test3 -- Sorting of float field OK

------------------- TEST 3 completed ---------------------

Test3 - Read I/Os  : 427
Test3 - Write I/Os : 339
------------------------ TEST 4 --------------------------
Test4 -- Sorting OK
------------------- TEST 4 completed ---------------------

Test4 - Read I/Os  : 104
Test4 - Write I/Os : 106
Test5 - Nothing done, so counters are minimal.
Test5 - Read I/Os  : 0
Test5 - Write I/Os : 0
Test6 - Nothing done, so counters are minimal.
Test6 - Read I/Os  : 0
Test6 - Write I/Os : 0

...Sort tests 
completely successfully
.


Sorting tests completed successfully
/usr/lib/jvm/java-21-openjdk-amd64/bin/javac -classpath .:.. SM_JoinTest.java TestDriver.java
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: SM_JoinTest.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
/usr/lib/jvm/java-21-openjdk-amd64/bin/java  -classpath .:.. tests.SM_JoinTest
Replacer: Clock



Any resemblance of persons in this database to people living or dead
is purely coincidental. The contents of this database do not reflect
the views of the University, the Computer Sciences Department, or the
developers...

**********************Query1 starting *********************
Query: Find the names of sailors who have reserved boat #1,
and print out the date of reservation.

  SELECT S.sname, R.date
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid AND R.bid = 1

(Tests FileScan, Projection, and Sort-Merge Join)

[Mike Carey, 05/10/95]
[David Dewitt, 05/11/95]
[Jeff Naughton, 05/12/95]

Query1 completed successfully!
******************* Query1 finished!!! *****************

Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0


Query1 - Read I/Os  : 0
Query1 - Write I/Os : 0
********************** Query2 starting *********************
Query2 - Read I/Os  : 0
Query2 - Write I/Os : 0
**********************Query3 starting *********************
Query: Find the names of sailors who have reserved a boat.

  SELECT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, and SortMerge Join.)

[Mike Carey]
[Mike Carey]
[Mike Carey]
[David Dewitt]
[David Dewitt]
[Jeff Naughton]
[Miron Livny]
[Yannis Ioannidis]
[Raghu Ramakrishnan]
[Raghu Ramakrishnan]

Query3 completed successfully!
******************* Query3 finished!!! *****************

Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0


Query3 - Read I/Os  : 0
Query3 - Write I/Os : 0
**********************Query4 starting *********************
Query: Find the names of sailors who have reserved a boat
and print each name once.

  SELECT DISTINCT S.sname
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid

(Tests FileScan, Projection, Sort-Merge Join, Dup Elim.)

[David Dewitt]
[Jeff Naughton]
[Mike Carey]
[Miron Livny]
[Raghu Ramakrishnan]
[Yannis Ioannidis]

Query4 completed successfully!
******************* Query4 finished!!! *****************

Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0


Query4 - Read I/Os  : 0
Query4 - Write I/Os : 0
**********************Query5 starting *********************
Query: Find the names of old sailors or sailors with rating < 7,
who have reserved a boat.

  SELECT S.sname, S.rating, S.age
  FROM   Sailors S, Reserves R
  WHERE  S.sid = R.sid and (S.age > 40 || S.rating < 7)

(Tests FileScan, Multiple Selection, Projection, Sort-Merge Join.)

[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[Mike Carey, 9, 40.3]
[David Dewitt, 10, 47.2]
[David Dewitt, 10, 47.2]
[Jeff Naughton, 5, 35.0]
[Yannis Ioannidis, 8, 40.2]

Query5 completed successfully!
******************* Query5 finished!!! *****************

Query5 - Read I/Os  : 0
Query5 - Write I/Os : 0


Query5 - Read I/Os  : 0
Query5 - Write I/Os : 0
********************** Query6 starting *********************
Query6 - Read I/Os  : 0
Query6 - Write I/Os : 0
Finished joins testing
join tests completed successfully
make[1]: Leaving directory '/home/ubuntu/minjava/javaminibase/src/tests'
[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ 
[?2004l[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ 
[?2004l[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ 
[?2004l[?2004h]0;ubuntu@ip-172-31-6-253: ~/minjava/javaminibase/src[01;32mubuntu@ip-172-31-6-253[00m:[01;34m~/minjava/javaminibase/src[00m$ 
[?2004l[?2004h]0;ubuntu@ip-172-31-6-253: